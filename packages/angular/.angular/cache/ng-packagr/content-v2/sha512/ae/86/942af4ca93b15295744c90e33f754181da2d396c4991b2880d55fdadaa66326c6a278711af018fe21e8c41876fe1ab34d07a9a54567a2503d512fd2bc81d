{"hash":"71d8c829d7c1ac53cf4bd494e8f0bb8d869b9848","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, EventEmitter, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport '@cds/core/tree-view/register.js';\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nclass CdsTreeDirective {\n    constructor(elementRef) {\n        this.element = elementRef.nativeElement;\n    }\n    get multiSelect() {\n        return this.element.multiSelect;\n    }\n    set multiSelect(value) {\n        this.element.multiSelect = !!value;\n    }\n}\nCdsTreeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdsTreeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: CdsTreeDirective, selector: \"cds-tree\", inputs: { multiSelect: \"multiSelect\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'cds-tree' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { multiSelect: [{\n                type: Input\n            }] } });\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nclass CdsTreeItemDirective {\n    constructor(elementRef) {\n        this.cdsMotionChange = new EventEmitter();\n        this.element = elementRef.nativeElement;\n    }\n    get i18n() {\n        return this.element.i18n;\n    }\n    set i18n(value) {\n        this.element.i18n = value;\n    }\n    get cdsMotion() {\n        return this.element.cdsMotion;\n    }\n    set cdsMotion(value) {\n        this.element.cdsMotion = value;\n    }\n    get multiSelect() {\n        return this.element.multiSelect;\n    }\n    set multiSelect(value) {\n        this.element.multiSelect = !!value;\n    }\n    get disabled() {\n        return this.element.disabled;\n    }\n    set disabled(value) {\n        this.element.disabled = !!value;\n    }\n    get expanded() {\n        return this.element.expanded;\n    }\n    set expanded(value) {\n        this.element.expanded = !!value;\n    }\n    get expandable() {\n        return this.element.expandable;\n    }\n    set expandable(value) {\n        this.element.expandable = !!value;\n    }\n    get indeterminate() {\n        return this.element.indeterminate;\n    }\n    set indeterminate(value) {\n        this.element.indeterminate = !!value;\n    }\n    get loading() {\n        return this.element.loading;\n    }\n    set loading(value) {\n        this.element.loading = !!value;\n    }\n    get selected() {\n        return this.element.selected;\n    }\n    set selected(value) {\n        this.element.selected = !!value;\n    }\n}\nCdsTreeItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeItemDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdsTreeItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: CdsTreeItemDirective, selector: \"cds-tree-item\", inputs: { i18n: \"i18n\", cdsMotion: \"cdsMotion\", multiSelect: \"multiSelect\", disabled: \"disabled\", expanded: \"expanded\", expandable: \"expandable\", indeterminate: \"indeterminate\", loading: \"loading\", selected: \"selected\" }, outputs: { cdsMotionChange: \"cdsMotionChange\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeItemDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'cds-tree-item' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { i18n: [{\n                type: Input\n            }], cdsMotion: [{\n                type: Input\n            }], multiSelect: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], expandable: [{\n                type: Input\n            }], indeterminate: [{\n                type: Input\n            }], loading: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], cdsMotionChange: [{\n                type: Output\n            }] } });\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nclass CdsTreeViewModule {\n}\nCdsTreeViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdsTreeViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeViewModule, declarations: [CdsTreeDirective, CdsTreeItemDirective], imports: [CommonModule], exports: [CdsTreeDirective, CdsTreeItemDirective] });\nCdsTreeViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeViewModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeViewModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [CdsTreeDirective, CdsTreeItemDirective],\n                    exports: [CdsTreeDirective, CdsTreeItemDirective],\n                }]\n        }] });\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Public API Surface of cds-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdsTreeDirective, CdsTreeItemDirective, CdsTreeViewModule };\n","map":{"version":3,"file":"tree-view.mjs","sources":["../../../projects/cds-angular/tree-view/cds-tree.directive.ts","../../../projects/cds-angular/tree-view/cds-tree-item.directive.ts","../../../projects/cds-angular/tree-view/tree-view.module.ts","../../../projects/cds-angular/tree-view/index.ts","../../../projects/cds-angular/tree-view/public-api.ts","../../../projects/cds-angular/tree-view/tree-view.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { Directive, ElementRef, Input } from '@angular/core';\nimport { CdsTree } from '@cds/core/tree-view';\n\n@Directive({ selector: 'cds-tree' })\nexport class CdsTreeDirective {\n  protected element: CdsTree;\n\n  get multiSelect() {\n    return this.element.multiSelect;\n  }\n  @Input() set multiSelect(value: boolean | '') {\n    this.element.multiSelect = !!value;\n  }\n\n  constructor(elementRef: ElementRef) {\n    this.element = elementRef.nativeElement;\n  }\n}\n","/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport { CdsTreeItem } from '@cds/core/tree-view';\n\n@Directive({ selector: 'cds-tree-item' })\nexport class CdsTreeItemDirective {\n  protected element: CdsTreeItem;\n\n  get i18n() {\n    return this.element.i18n;\n  }\n  @Input() set i18n(value) {\n    this.element.i18n = value;\n  }\n  get cdsMotion() {\n    return this.element.cdsMotion;\n  }\n  @Input() set cdsMotion(value) {\n    this.element.cdsMotion = value;\n  }\n  get multiSelect() {\n    return this.element.multiSelect;\n  }\n  @Input() set multiSelect(value: boolean | '') {\n    this.element.multiSelect = !!value;\n  }\n  get disabled() {\n    return this.element.disabled;\n  }\n  @Input() set disabled(value: boolean | '') {\n    this.element.disabled = !!value;\n  }\n  get expanded() {\n    return this.element.expanded;\n  }\n  @Input() set expanded(value: boolean | '') {\n    this.element.expanded = !!value;\n  }\n  get expandable() {\n    return this.element.expandable;\n  }\n  @Input() set expandable(value: boolean | '') {\n    this.element.expandable = !!value;\n  }\n  get indeterminate() {\n    return this.element.indeterminate;\n  }\n  @Input() set indeterminate(value: boolean | '') {\n    this.element.indeterminate = !!value;\n  }\n  get loading() {\n    return this.element.loading;\n  }\n  @Input() set loading(value: boolean | '') {\n    this.element.loading = !!value;\n  }\n  get selected() {\n    return this.element.selected;\n  }\n  @Input() set selected(value: boolean | '') {\n    this.element.selected = !!value;\n  }\n\n  @Output() cdsMotionChange: EventEmitter<CustomEvent> = new EventEmitter();\n\n  constructor(elementRef: ElementRef) {\n    this.element = elementRef.nativeElement;\n  }\n}\n","/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport '@cds/core/tree-view/register.js';\n\nimport { CdsTreeDirective } from './cds-tree.directive';\nimport { CdsTreeItemDirective } from './cds-tree-item.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [CdsTreeDirective, CdsTreeItemDirective],\n  exports: [CdsTreeDirective, CdsTreeItemDirective],\n})\nexport class CdsTreeViewModule {}\n","/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nexport * from './cds-tree.directive';\nexport * from './cds-tree-item.directive';\n\nexport * from './tree-view.module';\n","/*\n * Public API Surface of cds-angular\n */\n\nexport * from './index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, EventEmitter, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport '@cds/core/tree-view/register.js';\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nclass CdsTreeDirective {\n    constructor(elementRef) {\n        this.element = elementRef.nativeElement;\n    }\n    get multiSelect() {\n        return this.element.multiSelect;\n    }\n    set multiSelect(value) {\n        this.element.multiSelect = !!value;\n    }\n}\nCdsTreeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdsTreeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: CdsTreeDirective, selector: \"cds-tree\", inputs: { multiSelect: \"multiSelect\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'cds-tree' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { multiSelect: [{\n                type: Input\n            }] } });\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nclass CdsTreeItemDirective {\n    constructor(elementRef) {\n        this.cdsMotionChange = new EventEmitter();\n        this.element = elementRef.nativeElement;\n    }\n    get i18n() {\n        return this.element.i18n;\n    }\n    set i18n(value) {\n        this.element.i18n = value;\n    }\n    get cdsMotion() {\n        return this.element.cdsMotion;\n    }\n    set cdsMotion(value) {\n        this.element.cdsMotion = value;\n    }\n    get multiSelect() {\n        return this.element.multiSelect;\n    }\n    set multiSelect(value) {\n        this.element.multiSelect = !!value;\n    }\n    get disabled() {\n        return this.element.disabled;\n    }\n    set disabled(value) {\n        this.element.disabled = !!value;\n    }\n    get expanded() {\n        return this.element.expanded;\n    }\n    set expanded(value) {\n        this.element.expanded = !!value;\n    }\n    get expandable() {\n        return this.element.expandable;\n    }\n    set expandable(value) {\n        this.element.expandable = !!value;\n    }\n    get indeterminate() {\n        return this.element.indeterminate;\n    }\n    set indeterminate(value) {\n        this.element.indeterminate = !!value;\n    }\n    get loading() {\n        return this.element.loading;\n    }\n    set loading(value) {\n        this.element.loading = !!value;\n    }\n    get selected() {\n        return this.element.selected;\n    }\n    set selected(value) {\n        this.element.selected = !!value;\n    }\n}\nCdsTreeItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeItemDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdsTreeItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: CdsTreeItemDirective, selector: \"cds-tree-item\", inputs: { i18n: \"i18n\", cdsMotion: \"cdsMotion\", multiSelect: \"multiSelect\", disabled: \"disabled\", expanded: \"expanded\", expandable: \"expandable\", indeterminate: \"indeterminate\", loading: \"loading\", selected: \"selected\" }, outputs: { cdsMotionChange: \"cdsMotionChange\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeItemDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'cds-tree-item' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { i18n: [{\n                type: Input\n            }], cdsMotion: [{\n                type: Input\n            }], multiSelect: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], expandable: [{\n                type: Input\n            }], indeterminate: [{\n                type: Input\n            }], loading: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], cdsMotionChange: [{\n                type: Output\n            }] } });\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nclass CdsTreeViewModule {\n}\nCdsTreeViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdsTreeViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeViewModule, declarations: [CdsTreeDirective, CdsTreeItemDirective], imports: [CommonModule], exports: [CdsTreeDirective, CdsTreeItemDirective] });\nCdsTreeViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeViewModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: CdsTreeViewModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [CdsTreeDirective, CdsTreeItemDirective],\n                    exports: [CdsTreeDirective, CdsTreeItemDirective],\n                }]\n        }] });\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Public API Surface of cds-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdsTreeDirective, CdsTreeItemDirective, CdsTreeViewModule };\n","map":{"version":3,"file":"tree-view.mjs","sources":["../../../projects/cds-angular/tree-view/cds-tree.directive.ts","../../../projects/cds-angular/tree-view/cds-tree-item.directive.ts","../../../projects/cds-angular/tree-view/tree-view.module.ts","../../../projects/cds-angular/tree-view/index.ts","../../../projects/cds-angular/tree-view/public-api.ts","../../../projects/cds-angular/tree-view/tree-view.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { Directive, ElementRef, Input } from '@angular/core';\nimport { CdsTree } from '@cds/core/tree-view';\n\n@Directive({ selector: 'cds-tree' })\nexport class CdsTreeDirective {\n  protected element: CdsTree;\n\n  get multiSelect() {\n    return this.element.multiSelect;\n  }\n  @Input() set multiSelect(value: boolean | '') {\n    this.element.multiSelect = !!value;\n  }\n\n  constructor(elementRef: ElementRef) {\n    this.element = elementRef.nativeElement;\n  }\n}\n","/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport { CdsTreeItem } from '@cds/core/tree-view';\n\n@Directive({ selector: 'cds-tree-item' })\nexport class CdsTreeItemDirective {\n  protected element: CdsTreeItem;\n\n  get i18n() {\n    return this.element.i18n;\n  }\n  @Input() set i18n(value) {\n    this.element.i18n = value;\n  }\n  get cdsMotion() {\n    return this.element.cdsMotion;\n  }\n  @Input() set cdsMotion(value) {\n    this.element.cdsMotion = value;\n  }\n  get multiSelect() {\n    return this.element.multiSelect;\n  }\n  @Input() set multiSelect(value: boolean | '') {\n    this.element.multiSelect = !!value;\n  }\n  get disabled() {\n    return this.element.disabled;\n  }\n  @Input() set disabled(value: boolean | '') {\n    this.element.disabled = !!value;\n  }\n  get expanded() {\n    return this.element.expanded;\n  }\n  @Input() set expanded(value: boolean | '') {\n    this.element.expanded = !!value;\n  }\n  get expandable() {\n    return this.element.expandable;\n  }\n  @Input() set expandable(value: boolean | '') {\n    this.element.expandable = !!value;\n  }\n  get indeterminate() {\n    return this.element.indeterminate;\n  }\n  @Input() set indeterminate(value: boolean | '') {\n    this.element.indeterminate = !!value;\n  }\n  get loading() {\n    return this.element.loading;\n  }\n  @Input() set loading(value: boolean | '') {\n    this.element.loading = !!value;\n  }\n  get selected() {\n    return this.element.selected;\n  }\n  @Input() set selected(value: boolean | '') {\n    this.element.selected = !!value;\n  }\n\n  @Output() cdsMotionChange: EventEmitter<CustomEvent> = new EventEmitter();\n\n  constructor(elementRef: ElementRef) {\n    this.element = elementRef.nativeElement;\n  }\n}\n","/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport '@cds/core/tree-view/register.js';\n\nimport { CdsTreeDirective } from './cds-tree.directive';\nimport { CdsTreeItemDirective } from './cds-tree-item.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [CdsTreeDirective, CdsTreeItemDirective],\n  exports: [CdsTreeDirective, CdsTreeItemDirective],\n})\nexport class CdsTreeViewModule {}\n","/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nexport * from './cds-tree.directive';\nexport * from './cds-tree-item.directive';\n\nexport * from './tree-view.module';\n","/*\n * Public API Surface of cds-angular\n */\n\nexport * from './index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}